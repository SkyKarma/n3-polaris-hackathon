using System;
using System.ComponentModel;
using System.Numerics;

using Neo;
using Neo.SmartContract.Framework;
using Neo.SmartContract.Framework.Native;
using Neo.SmartContract.Framework.Services;

namespace PumpkinSwapNepDeployer
{
    [ContractPermission("*", new[] {"*"})]
    public partial class PumpkinSwapNepDeployer : SmartContract
    {
        private static StorageMap ContractStorage => new StorageMap(Storage.CurrentContext, "PumpkinDeployer");
        private static StorageMap ContractMetadata => new StorageMap(Storage.CurrentContext, "Metadata");
        private static Transaction Tx => (Transaction) Runtime.ScriptContainer;


        public static void OnNEP17Payment(UInt160 from, BigInteger amount, object[] data)
        {
            if(data == null)
            {
                return;
            }

            if (Runtime.CallingScriptHash != GAS.Hash)
            {
                throw new Exception("Wrong calling script hash");
            }

            if(amount != GetDeployFee())
            {
                throw new Exception("Wrong fee");
            }

            DeployNewTokenContract(
                (string)data[0], 
                (string)data[1], 
                (BigInteger)data[2], 
                (BigInteger)data[3], 
                (string)data[4],
                (string)data[5],
                (string)data[6]);
        }

        private static void DeployNewTokenContract(
            string contractName, 
            string symbol,
            BigInteger decimals,
            BigInteger supply,
            string author, 
            string email, 
            string description)
        {
            var contractManifest = "{\"name\":\"" + contractName + "\",\"groups\":[],\"features\":{},\"supportedstandards\":[\"NEP-17\"],\"abi\":{\"methods\":[{\"name\":\"symbol\",\"offset\":1539,\"safe\":false,\"returntype\":\"String\",\"parameters\":[]},{\"name\":\"decimals\",\"offset\":1554,\"safe\":false,\"returntype\":\"Integer\",\"parameters\":[]},{\"name\":\"totalSupply\",\"offset\":167,\"safe\":true,\"returntype\":\"Integer\",\"parameters\":[]},{\"name\":\"balanceOf\",\"offset\":197,\"safe\":true,\"returntype\":\"Integer\",\"parameters\":[{\"name\":\"owner\",\"type\":\"Hash160\"}]},{\"name\":\"transfer\",\"offset\":557,\"safe\":false,\"returntype\":\"Boolean\",\"parameters\":[{\"name\":\"from\",\"type\":\"Hash160\"},{\"name\":\"to\",\"type\":\"Hash160\"},{\"name\":\"amount\",\"type\":\"Integer\"},{\"name\":\"data\",\"type\":\"Any\"}]},{\"name\":\"_deploy\",\"offset\":1121,\"safe\":false,\"returntype\":\"Void\",\"parameters\":[{\"name\":\"data\",\"type\":\"Any\"},{\"name\":\"update\",\"type\":\"Boolean\"}]},{\"name\":\"update\",\"offset\":1184,\"safe\":false,\"returntype\":\"Void\",\"parameters\":[{\"name\":\"nefFile\",\"type\":\"ByteArray\"},{\"name\":\"manifest\",\"type\":\"String\"}]},{\"name\":\"initialise\",\"offset\":1291,\"safe\":false,\"returntype\":\"Void\",\"parameters\":[{\"name\":\"owner\",\"type\":\"Hash160\"},{\"name\":\"decimals\",\"type\":\"Integer\"},{\"name\":\"symbol\",\"type\":\"String\"},{\"name\":\"totalSupply\",\"type\":\"Integer\"}]},{\"name\":\"burn\",\"offset\":1393,\"safe\":false,\"returntype\":\"Void\",\"parameters\":[{\"name\":\"amount\",\"type\":\"Integer\"}]},{\"name\":\"_initialize\",\"offset\":1523,\"safe\":false,\"returntype\":\"Void\",\"parameters\":[]}],\"events\":[{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"Hash160\"},{\"name\":\"to\",\"type\":\"Hash160\"},{\"name\":\"amount\",\"type\":\"Integer\"}]}]},\"permissions\":[{\"contract\":\"*\",\"methods\":\"*\"}],\"trusts\":[],\"extra\":";

            var extras = "{";

            if(author.Length > 0)
            {
                extras += "\"Author\":\"" + author + "\"";
            }
            if(email.Length > 0)
            {
                extras += ",\"Email\":\"" + email + "\"";
            }
            if(description.Length > 0)
            {
                extras += ",\"Description\":\"" + description + "\"";
            }
            extras += "}}";

            var manifest = contractManifest + extras;

            byte[] nef = { 0x4e, 0x45, 0x46, 0x33, 0x4e, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x53, 0x68, 0x61, 0x72, 0x70, 0x20, 0x33, 0x2e, 0x30, 0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfd, 0xa3, 0xfa, 0x43, 0x46, 0xea, 0x53, 0x2a, 0x25, 0x8f, 0xc4, 0x97, 0xdd, 0xad, 0xdb, 0x64, 0x37, 0xc9, 0xfd, 0xff, 0x0b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x01, 0x00, 0x01, 0x0f, 0xfd, 0xa3, 0xfa, 0x43, 0x46, 0xea, 0x53, 0x2a, 0x25, 0x8f, 0xc4, 0x97, 0xdd, 0xad, 0xdb, 0x64, 0x37, 0xc9, 0xfd, 0xff, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x03, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xfd, 0x21, 0x06, 0x57, 0x00, 0x01, 0x35, 0x2c, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x21, 0x40, 0x21, 0x40, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x40, 0x0c, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x12, 0xc0, 0x40, 0x12, 0xc0, 0x40, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x40, 0x57, 0x00, 0x01, 0x78, 0x35, 0x06, 0x00, 0x00, 0x00, 0x40, 0x57, 0x00, 0x01, 0x78, 0x35, 0x06, 0x00, 0x00, 0x00, 0x40, 0x57, 0x00, 0x01, 0x78, 0x35, 0x06, 0x00, 0x00, 0x00, 0x40, 0x57, 0x00, 0x01, 0x40, 0x57, 0x00, 0x01, 0x35, 0xc0, 0xff, 0xff, 0xff, 0x0c, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x4a, 0xd8, 0x26, 0x04, 0x45, 0x10, 0xdb, 0x21, 0x4a, 0x10, 0x01, 0x00, 0x01, 0xbb, 0x24, 0x03, 0x3a, 0x21, 0x40, 0x4a, 0xd8, 0x26, 0x04, 0x45, 0x10, 0xdb, 0x21, 0x40, 0x0c, 0x01, 0x00, 0xdb, 0x30, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x4a, 0xd8, 0x26, 0x04, 0x45, 0x10, 0xdb, 0x21, 0x40, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x40, 0x57, 0x02, 0x01, 0x21, 0x78, 0x70, 0x68, 0x0b, 0x97, 0x27, 0x0d, 0x00, 0x00, 0x00, 0x11, 0xdb, 0x20, 0x23, 0x11, 0x00, 0x00, 0x00, 0x21, 0x78, 0x4a, 0xd9, 0x28, 0x50, 0xca, 0x00, 0x14, 0xb3, 0xab, 0xaa, 0x21, 0x27, 0x28, 0x00, 0x00, 0x00, 0x0c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x3a, 0x21, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x11, 0x11, 0x88, 0x4e, 0x10, 0x51, 0xd0, 0x50, 0x12, 0xc0, 0x71, 0x69, 0x78, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x4a, 0xd8, 0x26, 0x04, 0x45, 0x10, 0xdb, 0x21, 0x23, 0x05, 0x00, 0x00, 0x00, 0x40, 0x4a, 0xd9, 0x28, 0x50, 0xca, 0x00, 0x14, 0xb3, 0xab, 0x40, 0x11, 0x88, 0x4e, 0x10, 0x51, 0xd0, 0x50, 0x12, 0xc0, 0x40, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x40, 0x57, 0x03, 0x01, 0x21, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x70, 0x0c, 0x01, 0x00, 0xdb, 0x30, 0x71, 0x69, 0x68, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x4a, 0xd8, 0x26, 0x04, 0x45, 0x10, 0xdb, 0x21, 0x72, 0x6a, 0x78, 0x9e, 0x4a, 0x72, 0x45, 0x6a, 0x69, 0x68, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x40, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x40, 0x57, 0x02, 0x02, 0x21, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x11, 0x11, 0x88, 0x4e, 0x10, 0x51, 0xd0, 0x50, 0x12, 0xc0, 0x70, 0x68, 0x78, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x4a, 0xd8, 0x26, 0x04, 0x45, 0x10, 0xdb, 0x21, 0x71, 0x69, 0x79, 0x9e, 0x4a, 0x71, 0x45, 0x69, 0x10, 0xb5, 0x27, 0x0d, 0x00, 0x00, 0x00, 0x10, 0xdb, 0x20, 0x23, 0x3d, 0x00, 0x00, 0x00, 0x21, 0x69, 0x10, 0xb3, 0x27, 0x19, 0x00, 0x00, 0x00, 0x68, 0x78, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x2f, 0x58, 0xc5, 0xed, 0x23, 0x17, 0x00, 0x00, 0x00, 0x21, 0x68, 0x78, 0x69, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x21, 0x11, 0xdb, 0x20, 0x23, 0x05, 0x00, 0x00, 0x00, 0x40, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x2f, 0x58, 0xc5, 0xed, 0x40, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x40, 0x57, 0x02, 0x04, 0x21, 0x78, 0x70, 0x68, 0x0b, 0x97, 0x27, 0x0d, 0x00, 0x00, 0x00, 0x11, 0xdb, 0x20, 0x23, 0x11, 0x00, 0x00, 0x00, 0x21, 0x78, 0x4a, 0xd9, 0x28, 0x50, 0xca, 0x00, 0x14, 0xb3, 0xab, 0xaa, 0x21, 0x27, 0x27, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x22, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x3a, 0x21, 0x79, 0x71, 0x69, 0x0b, 0x97, 0x27, 0x0d, 0x00, 0x00, 0x00, 0x11, 0xdb, 0x20, 0x23, 0x11, 0x00, 0x00, 0x00, 0x21, 0x79, 0x4a, 0xd9, 0x28, 0x50, 0xca, 0x00, 0x14, 0xb3, 0xab, 0xaa, 0x21, 0x27, 0x25, 0x00, 0x00, 0x00, 0x0c, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x22, 0x74, 0x6f, 0x22, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x3a, 0x21, 0x7a, 0x10, 0xb5, 0x27, 0x2d, 0x00, 0x00, 0x00, 0x0c, 0x25, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x3a, 0x21, 0x78, 0x41, 0xf8, 0x27, 0xec, 0x8c, 0xaa, 0x27, 0x0d, 0x00, 0x00, 0x00, 0x10, 0xdb, 0x20, 0x23, 0x41, 0x00, 0x00, 0x00, 0x21, 0x7a, 0x10, 0x98, 0x27, 0x26, 0x00, 0x00, 0x00, 0x21, 0x7a, 0x9b, 0x78, 0x35, 0x86, 0xfe, 0xff, 0xff, 0xaa, 0x27, 0x0d, 0x00, 0x00, 0x00, 0x10, 0xdb, 0x20, 0x23, 0x21, 0x00, 0x00, 0x00, 0x21, 0x7a, 0x79, 0x35, 0x70, 0xfe, 0xff, 0xff, 0x45, 0x21, 0x21, 0x7b, 0x7a, 0x79, 0x78, 0x35, 0x14, 0x00, 0x00, 0x00, 0x11, 0xdb, 0x20, 0x23, 0x05, 0x00, 0x00, 0x00, 0x40, 0x41, 0xf8, 0x27, 0xec, 0x8c, 0x40, 0x57, 0x02, 0x04, 0x21, 0xc2, 0x4a, 0x78, 0xcf, 0x4a, 0x79, 0xcf, 0x4a, 0x7a, 0xcf, 0x0c, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x95, 0x01, 0x6f, 0x61, 0x79, 0x70, 0x68, 0x0b, 0x97, 0xaa, 0x25, 0x0d, 0x00, 0x00, 0x00, 0x10, 0xdb, 0x20, 0x23, 0x0f, 0x00, 0x00, 0x00, 0x21, 0x79, 0x37, 0x00, 0x00, 0x71, 0x69, 0x0b, 0x97, 0xaa, 0x21, 0x27, 0x22, 0x00, 0x00, 0x00, 0x7b, 0x7a, 0x78, 0x13, 0xc0, 0x1f, 0x0c, 0x0e, 0x6f, 0x6e, 0x4e, 0x45, 0x50, 0x31, 0x37, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x79, 0x41, 0x62, 0x7d, 0x5b, 0x52, 0x45, 0x21, 0x40, 0x37, 0x00, 0x00, 0x40, 0x41, 0x62, 0x7d, 0x5b, 0x52, 0x40, 0x57, 0x00, 0x02, 0x21, 0x79, 0x99, 0x10, 0xb5, 0x27, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x21, 0x79, 0x10, 0xb3, 0x27, 0x0a, 0x00, 0x00, 0x00, 0x23, 0x1d, 0x00, 0x00, 0x00, 0x21, 0x79, 0x78, 0x35, 0xc0, 0xfd, 0xff, 0xff, 0x45, 0x79, 0x35, 0x84, 0xfd, 0xff, 0xff, 0x0b, 0x79, 0x78, 0x0b, 0x35, 0x60, 0xff, 0xff, 0xff, 0x40, 0x57, 0x00, 0x02, 0x21, 0x79, 0x99, 0x10, 0xb5, 0x27, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x21, 0x79, 0x10, 0xb3, 0x27, 0x0a, 0x00, 0x00, 0x00, 0x23, 0x31, 0x00, 0x00, 0x00, 0x21, 0x79, 0x9b, 0x78, 0x35, 0x82, 0xfd, 0xff, 0xff, 0xaa, 0x27, 0x11, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x21, 0x79, 0x9b, 0x35, 0x33, 0xfd, 0xff, 0xff, 0x0b, 0x79, 0x0b, 0x78, 0x35, 0x0f, 0xff, 0xff, 0xff, 0x40, 0x0c, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x9b, 0xf6, 0x67, 0xce, 0x12, 0xc0, 0x40, 0x41, 0x2d, 0x51, 0x08, 0x30, 0x40, 0x41, 0x2d, 0x51, 0x08, 0x30, 0x40, 0x57, 0x00, 0x02, 0x21, 0x79, 0xaa, 0x27, 0x28, 0x00, 0x00, 0x00, 0x21, 0x35, 0xc2, 0xfb, 0xff, 0xff, 0x0c, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x35, 0xdc, 0xff, 0xff, 0xff, 0x13, 0xce, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x21, 0x21, 0x40, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x40, 0x57, 0x00, 0x02, 0x21, 0x35, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x79, 0x78, 0x37, 0x01, 0x00, 0x40, 0x57, 0x01, 0x00, 0x21, 0x35, 0x7b, 0xfb, 0xff, 0xff, 0x0c, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x11, 0xce, 0x50, 0x8b, 0x50, 0x10, 0xce, 0x41, 0x92, 0x5d, 0xe8, 0x31, 0x70, 0x35, 0x87, 0xff, 0xff, 0xff, 0x13, 0xce, 0x68, 0x97, 0xaa, 0x27, 0x2d, 0x00, 0x00, 0x00, 0x21, 0x0c, 0x23, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x64, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x3a, 0x21, 0x21, 0x40, 0x37, 0x01, 0x00, 0x40, 0x57, 0x00, 0x04, 0x21, 0x35, 0xa1, 0xff, 0xff, 0xff, 0x35, 0x1b, 0xfb, 0xff, 0xff, 0x0c, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x78, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x35, 0x00, 0xfb, 0xff, 0xff, 0x0c, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x79, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x35, 0xe2, 0xfa, 0xff, 0xff, 0x0c, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x7a, 0x12, 0x4d, 0x11, 0xce, 0x51, 0x8b, 0x51, 0x10, 0xce, 0x41, 0xe6, 0x3f, 0x18, 0x84, 0x7b, 0x78, 0x35, 0x43, 0xfe, 0xff, 0xff, 0x40, 0x57, 0x00, 0x01, 0x21, 0x78, 0x10, 0xb5, 0x27, 0x2d, 0x00, 0x00, 0x00, 0x0c, 0x25, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x3a, 0x21, 0x35, 0xaf, 0xfe, 0xff, 0xff, 0x13, 0xce, 0x41, 0xf8, 0x27, 0xec, 0x8c, 0xaa, 0x27, 0x0a, 0x00, 0x00, 0x00, 0x23, 0x3a, 0x00, 0x00, 0x00, 0x21, 0x35, 0x97, 0xfe, 0xff, 0xff, 0x13, 0xce, 0x35, 0x00, 0xfb, 0xff, 0xff, 0x78, 0xb5, 0x27, 0x0a, 0x00, 0x00, 0x00, 0x23, 0x21, 0x00, 0x00, 0x00, 0x21, 0x78, 0x10, 0x97, 0x27, 0x0a, 0x00, 0x00, 0x00, 0x23, 0x13, 0x00, 0x00, 0x00, 0x21, 0x78, 0x35, 0x6f, 0xfe, 0xff, 0xff, 0x13, 0xce, 0x35, 0xfe, 0xfd, 0xff, 0xff, 0x40, 0x56, 0x01, 0x0a, 0x77, 0xfa, 0xff, 0xff, 0x0a, 0x06, 0xfa, 0xff, 0xff, 0x12, 0xc0, 0x60, 0x40, 0xc2, 0x4a, 0x58, 0xcf, 0x4a, 0x35, 0x42, 0xfa, 0xff, 0xff, 0x23, 0xf3, 0xf9, 0xff, 0xff, 0xc2, 0x4a, 0x58, 0xcf, 0x4a, 0x35, 0x33, 0xfa, 0xff, 0xff, 0x23, 0x50, 0xfa, 0xff, 0xff, 0x5a, 0x4a, 0x8f, 0xd9 };

            Contract newContract = ContractManagement.Deploy(nef.ToByteString(), manifest);
            Contract.Call(newContract.Hash, "initialise", CallFlags.All, new object[] { Tx.Sender, decimals, symbol, supply });

            ContractStorage.Put(Tx.Sender, newContract.Hash);

            OnDeployTokenContract(Tx.Sender, contractName, newContract.Hash, newContract.Hash.ToAddress(53));
        }
    }
}